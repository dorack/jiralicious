var search_data = {"index":{"longSearchIndex":["jiralicious","jiralicious::authenticationerror","jiralicious::base","jiralicious::basicsession","jiralicious::captcharequired","jiralicious::configuration","jiralicious::cookieexpired","jiralicious::cookiesession","jiralicious::customfieldoption","jiralicious::field","jiralicious::invalidlogin","jiralicious::issue","jiralicious::issue::comment","jiralicious::issue::fields","jiralicious::issue::transitions","jiralicious::issue::watchers","jiralicious::issuenotfound","jiralicious::jiraerror","jiralicious::jqlerror","jiralicious::notloggedin","jiralicious::parsers","jiralicious::parsers::fieldparser","jiralicious::project","jiralicious::searchresult","jiralicious::session","jiralicious::transitionerror","jiralicious::issue::comment#add()","jiralicious::issue::comment::add()","jiralicious::issue::watchers::add()","jiralicious::issue::watchers#add()","jiralicious::issue::fields#add_comment()","jiralicious::cookiesession#after_request()","jiralicious::cookiesession#alive?()","jiralicious::base#all()","jiralicious::base::all()","jiralicious::issue::transitions#all()","jiralicious::issue::fields#append_a()","jiralicious::issue::fields#append_h()","jiralicious::issue::fields#append_s()","jiralicious::issue::assignee()","jiralicious::basicsession#before_request()","jiralicious::cookiesession#before_request()","jiralicious::configuration#configure()","jiralicious::issue::fields#count()","jiralicious::issue::create()","jiralicious::issue::createmeta()","jiralicious::issue::fields#current()","jiralicious::issue::comment#edit()","jiralicious::issue::comment::edit()","jiralicious::issue::editmeta()","jiralicious::base::endpoint_name()","jiralicious::base#endpoint_name()","jiralicious::customfieldoption::endpoint_name()","jiralicious::configuration::extended()","jiralicious::base::fetch()","jiralicious::base::find()","jiralicious::customfieldoption::find()","jiralicious::issue::transitions::find()","jiralicious::issue::watchers#find()","jiralicious::base::find_all()","jiralicious::issue::transitions::find_all()","jiralicious::issue::comment#find_by_id()","jiralicious::issue::comment::find_by_key()","jiralicious::issue::watchers::find_by_key()","jiralicious::issue::comment::find_by_key_and_id()","jiralicious::issue::transitions::find_by_key_and_id()","jiralicious::issue::fields#format_for_create()","jiralicious::issue::fields#format_for_update()","jiralicious::issue::get_transitions()","jiralicious::issue::transitions#go()","jiralicious::issue::transitions::go()","jiralicious::base::handler()","jiralicious::project::issue_list()","jiralicious::searchresult#issues()","jiralicious::searchresult#issues_raw()","jiralicious::issue::fields#length()","jiralicious::issue#load()","jiralicious::configuration#load_yml()","jiralicious::base#loaded?()","jiralicious::cookiesession#login()","jiralicious::cookiesession#logout()","jiralicious::issue::transitions::meta()","jiralicious::base#method_missing()","jiralicious::customfieldoption::new()","jiralicious::field::new()","jiralicious::issue::new()","jiralicious::issue::comment::new()","jiralicious::issue::fields::new()","jiralicious::issue::transitions::new()","jiralicious::issue::watchers::new()","jiralicious::project::new()","jiralicious::searchresult::new()","jiralicious::base#numeric?()","jiralicious::configuration#options()","jiralicious::base#parent_name()","jiralicious::base::parent_name()","jiralicious::parsers::fieldparser#parse!()","jiralicious::base#properties_from_hash()","jiralicious::base#reload()","jiralicious::issue#reload()","jiralicious::issue#remove()","jiralicious::issue::remove()","jiralicious::issue::comment::remove()","jiralicious::issue::comment#remove()","jiralicious::issue::watchers::remove()","jiralicious::issue::watchers#remove()","jiralicious::session#request()","jiralicious::configuration#reset()","jiralicious#rest_path()","jiralicious::issue#save()","jiralicious::issue#save!()","jiralicious#search()","jiralicious#session()","jiralicious::issue::fields#set()","jiralicious::issue#set_assignee()","jiralicious::issue::fields#set_current()","jiralicious::issue::fields#set_id()","jiralicious::issue::fields#set_name()","jiralicious::issue::transition()","jiralicious::issue::update()","jiralicious::issue::fields#updated()"],"info":[["Jiralicious","","Jiralicious.html","","<p>The Jiralicious module standard options and methods\n"],["Jiralicious::AuthenticationError","","Jiralicious/AuthenticationError.html","",""],["Jiralicious::Base","","Jiralicious/Base.html","","<p>The Base class encapsulates all of the default functionality necessary in\norder to properly manage the …\n"],["Jiralicious::BasicSession","","Jiralicious/BasicSession.html","","<p>The BasicSesion class extends the default Session class by forcing\nbasic_auth to be fired prior to any …\n"],["Jiralicious::CaptchaRequired","","Jiralicious/CaptchaRequired.html","",""],["Jiralicious::Configuration","","Jiralicious/Configuration.html","",""],["Jiralicious::CookieExpired","","Jiralicious/CookieExpired.html","","<p>These are in the JIRA API docs. Not sure about specifics, as the docs\ndon’t mention them. Added here …\n"],["Jiralicious::CookieSession","","Jiralicious/CookieSession.html","","<p>The CookieSesssion class extends the Session class with the functionality\nof utilizing cookies for authorization …\n"],["Jiralicious::CustomFieldOption","","Jiralicious/CustomFieldOption.html","","<p>The CustomFieldOption provides a list of available custom field options.\nThis method is used in lazy …\n"],["Jiralicious::Field","","Jiralicious/Field.html","","<p>The Field class is used in multiple classes as a support object. This class\nis designed as a Object  …\n"],["Jiralicious::InvalidLogin","","Jiralicious/InvalidLogin.html","",""],["Jiralicious::Issue","","Jiralicious/Issue.html","","<p>The Issue class rolls up all functionality of issues from jira. This class\ncontains methods to manage …\n"],["Jiralicious::Issue::Comment","","Jiralicious/Issue/Comment.html","","<p>The Comment class retrieves and controls the functionality of Comments\nassociated with an Issue.\n"],["Jiralicious::Issue::Fields","","Jiralicious/Issue/Fields.html","","<p>The Fields class provides functionality to the Issue class that allows it\nto easily update or create …\n"],["Jiralicious::Issue::Transitions","","Jiralicious/Issue/Transitions.html","","<p>The Transitions Class provides all of the functionality to retrieve, and\nuse a transition associated …\n"],["Jiralicious::Issue::Watchers","","Jiralicious/Issue/Watchers.html","","<p>The Watchers class is used to manage the watchers on an issue.\n"],["Jiralicious::IssueNotFound","","Jiralicious/IssueNotFound.html","",""],["Jiralicious::JiraError","","Jiralicious/JiraError.html","",""],["Jiralicious::JqlError","","Jiralicious/JqlError.html","",""],["Jiralicious::NotLoggedIn","","Jiralicious/NotLoggedIn.html","",""],["Jiralicious::Parsers","","Jiralicious/Parsers.html","",""],["Jiralicious::Parsers::FieldParser","","Jiralicious/Parsers/FieldParser.html","","<p>The FieldParser module is an extention that assists in managing hash\nparsing and implementation.\n"],["Jiralicious::Project","","Jiralicious/Project.html","","<p>The Project class rolls up the basic functionality for managing Projects\nwithin Jira through the Rest …\n"],["Jiralicious::SearchResult","","Jiralicious/SearchResult.html","","<p>The SearchResult class organizes the response from the Jira API In a way\nthat is easily parsable into …\n"],["Jiralicious::Session","","Jiralicious/Session.html","","<p>The Session class handles the interactions with the Jira Rest API Through\nthe HTTParty gem.\n"],["Jiralicious::TransitionError","","Jiralicious/TransitionError.html","",""],["add","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-i-add","(comment)","<p>Adds a new Comment to the loaded Issue\n"],["add","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-c-add","(comment, key)","<p>Adds a new Comment to the Issue\n"],["add","Jiralicious::Issue::Watchers","Jiralicious/Issue/Watchers.html#method-c-add","(name, key)","<p>Adds a new Watcher to the Issue\n"],["add","Jiralicious::Issue::Watchers","Jiralicious/Issue/Watchers.html#method-i-add","(name)","<p>Adds a new Watcher to the Issue\n"],["add_comment","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-add_comment","(comment)","<p>Adds a comment to the field list\n"],["after_request","Jiralicious::CookieSession","Jiralicious/CookieSession.html#method-i-after_request","(response)","<p>Handles the response from the request\n"],["alive?","Jiralicious::CookieSession","Jiralicious/CookieSession.html#method-i-alive-3F","()","<p>Checks to see if session is active\n"],["all","Jiralicious::Base","Jiralicious/Base.html#method-i-all","()","<p>Searches for all objects of the inheritance class. This method can create\nvery large datasets and is …\n"],["all","Jiralicious::Base","Jiralicious/Base.html#method-c-all","()",""],["all","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-i-all","()","<p>Retrieves the associated Transitions based on the Issue Key\n"],["append_a","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-append_a","(field, value)","<p>Appends the current Array with the provided value\n"],["append_h","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-append_h","(field, hash)","<p>Appends the current Hash with the provided value\n"],["append_s","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-append_s","(field, value)","<p>Appends the current String with the provided value\n"],["assignee","Jiralicious::Issue","Jiralicious/Issue.html#method-c-assignee","(name, key)","<p>Adds specified assignee to the Jira Issue.\n"],["before_request","Jiralicious::BasicSession","Jiralicious/BasicSession.html#method-i-before_request","()","<p>Fires off the basic_auth with the local username and password.\n"],["before_request","Jiralicious::CookieSession","Jiralicious/CookieSession.html#method-i-before_request","()","<p>Provides login information on every request\n"],["configure","Jiralicious::Configuration","Jiralicious/Configuration.html#method-i-configure","()","<p>Enables block configuration mode\n"],["count","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-count","()","<p>Returns the count of fields being updated.\n"],["create","Jiralicious::Issue","Jiralicious/Issue.html#method-c-create","(issue)","<p>Creates a new issue. This method is not recommended for direct access but\nis provided for advanced users. …\n"],["createmeta","Jiralicious::Issue","Jiralicious/Issue.html#method-c-createmeta","(projectkeys, issuetypeids = nil)","<p>Retrieves the create meta for the Jira Project based on Issue Types. Can be\nused to validate or filter …\n"],["current","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-current","()","<p>Returns the current fields object\n"],["edit","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-i-edit","(comment)","<p>Updates a Comment based on loaded Issue and Comment\n"],["edit","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-c-edit","(comment, key, id)","<p>Updates a Comment based on Issue Key and Comment ID\n"],["editmeta","Jiralicious::Issue","Jiralicious/Issue.html#method-c-editmeta","(key)","<p>Retrieves the edit meta for the Jira Issue. Can be used to validate or\nfilter create requests to minimize …\n"],["endpoint_name","Jiralicious::Base","Jiralicious/Base.html#method-c-endpoint_name","()","<p>Generates the endpoint_name based on the current inheritance class.\n"],["endpoint_name","Jiralicious::Base","Jiralicious/Base.html#method-i-endpoint_name","()","<p>Generates the endpoint_name based on the current inheritance class.\n"],["endpoint_name","Jiralicious::CustomFieldOption","Jiralicious/CustomFieldOption.html#method-c-endpoint_name","()","<p>Overrides the auto-generated endpoint_name from Base. This is necessary due\nto lower camel case naming …\n"],["extended","Jiralicious::Configuration","Jiralicious/Configuration.html#method-c-extended","(base)","<p>Reset when extended into class\n"],["fetch","Jiralicious::Base","Jiralicious/Base.html#method-c-fetch","(options = {})","<p>uses the options to build the URI options necessary to handle the request.\nSome options are defaulted …\n"],["find","Jiralicious::Base","Jiralicious/Base.html#method-c-find","(key, options = {})","<p>Finds the specified key in relation to the current class. This is based on\nthe inheritance and will create …\n"],["find","Jiralicious::CustomFieldOption","Jiralicious/CustomFieldOption.html#method-c-find","(id, options = {})","<p>Retrieves the options based on the ID\n"],["find","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-c-find","(key, options = {})","<p>Retrieves the associated Transitions based on the Issue Key\n"],["find","Jiralicious::Issue::Watchers","Jiralicious/Issue/Watchers.html#method-i-find","()","<p>Finds all watchers based on the provided Issue Key\n"],["find_all","Jiralicious::Base","Jiralicious/Base.html#method-c-find_all","()","<p>Searches for all objects of the inheritance class. This method can create\nvery large datasets and is …\n"],["find_all","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-c-find_all","(key, options = {})",""],["find_by_id","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-i-find_by_id","(id, options = {})","<p>Retrieves the Comment based on the loaded Issue and Comment ID\n"],["find_by_key","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-c-find_by_key","(key, options = {})","<p>Retrieves the Comments based on the Issue Key\n"],["find_by_key","Jiralicious::Issue::Watchers","Jiralicious/Issue/Watchers.html#method-c-find_by_key","(key)","<p>Finds all watchers based on the provided Issue Key\n"],["find_by_key_and_id","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-c-find_by_key_and_id","(key, id, options = {})","<p>Retrieves the Comment based on the Issue Key and Comment ID\n"],["find_by_key_and_id","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-c-find_by_key_and_id","(key, id, options = {})","<p>Retrieves the Transition based on the Issue Key and Transition ID\n"],["format_for_create","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-format_for_create","()","<p>Formats the fields_update object correctly for Jira to perform an create\nrequest.\n"],["format_for_update","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-format_for_update","()","<p>Formats the fields_update object correctly for Jira to perform an update\nrequest.\n"],["get_transitions","Jiralicious::Issue","Jiralicious/Issue.html#method-c-get_transitions","(transitions_url)","<p>Legacy method to retrieve transitions manually.\n"],["go","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-i-go","(options = {})","<p>Processes the Transition based on the provided options\n"],["go","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-c-go","(key, id, options = {})","<p>Processes the Transition based on the provided options\n"],["handler","Jiralicious::Base","Jiralicious/Base.html#method-c-handler","()","<p>Configures the default handler. This can be overridden in the child class\nto provide additional error …\n"],["issue_list","Jiralicious::Project","Jiralicious/Project.html#method-c-issue_list","(key)","<p>Returns a list of issues within the project. The issue list is limited to\nonly return the issue ID and …\n"],["issues","Jiralicious::SearchResult","Jiralicious/SearchResult.html#method-i-issues","()","<p>Loads the different issues through the map. This is not recommended for\nlarge objects as it can be troublesome …\n"],["issues_raw","Jiralicious::SearchResult","Jiralicious/SearchResult.html#method-i-issues_raw","()","<p>Returns the Issues attribute without loading the extra information. Ideal\nfor a quick scan of the Hash …\n"],["length","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-length","()","<p>Returns the length of fields being updated.\n"],["load","Jiralicious::Issue","Jiralicious/Issue.html#method-i-load","(decoded_hash, default = nil)","<p>Imports all data from a decoded hash. This function is used when a blank\nissue is created but needs to …\n"],["load_yml","Jiralicious::Configuration","Jiralicious/Configuration.html#method-i-load_yml","(yml_file)","<p>Loads the provided YML file.\n<p>Can provide either direct or relational path to the file. It is recommended\n…\n"],["loaded?","Jiralicious::Base","Jiralicious/Base.html#method-i-loaded-3F","()","<p>Returns the the logical form of the loaded member. This used to determine\nif the object is loaded and …\n"],["login","Jiralicious::CookieSession","Jiralicious/CookieSession.html#method-i-login","()","<p>Authenticates the login\n"],["logout","Jiralicious::CookieSession","Jiralicious/CookieSession.html#method-i-logout","()","<p>Logs out of the API\n"],["meta","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-c-meta","(key, id, options = {})","<p>Retrieves the meta data for the Transition based on the options, Issue Key\nand Transition ID provided. …\n"],["method_missing","Jiralicious::Base","Jiralicious/Base.html#method-i-method_missing","(meth, *args, &block)","<p>Overrides the default method_missing check. This override is used in lazy\nloading to ensure that the …\n"],["new","Jiralicious::CustomFieldOption","Jiralicious/CustomFieldOption.html#method-c-new","(decoded_json, default = nil, &blk)","<p>Initialization Method\n"],["new","Jiralicious::Field","Jiralicious/Field.html#method-c-new","(decoded_json, default = nil, &blk)","<p>Initialization Method\n<p>Builds the dynamic Field object from either a Hash or Array. The decoded\nJSON object …\n"],["new","Jiralicious::Issue","Jiralicious/Issue.html#method-c-new","(decoded_json = nil, default = nil, &blk)","<p>Initialization Method\n"],["new","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-c-new","(decoded_json = nil, default = nil, &blk)","<p>Initialization Method\n"],["new","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-c-new","(fc = nil)","<p>Initialization Method\n"],["new","Jiralicious::Issue::Transitions","Jiralicious/Issue/Transitions.html#method-c-new","(decoded_json = nil, default = nil, &blk)","<p>Initialization Method\n"],["new","Jiralicious::Issue::Watchers","Jiralicious/Issue/Watchers.html#method-c-new","(decoded_json = nil, default = nil, &blk)","<p>Initialization Method\n"],["new","Jiralicious::Project","Jiralicious/Project.html#method-c-new","(decoded_json, default = nil, &blk)","<p>Initialization Method\n"],["new","Jiralicious::SearchResult","Jiralicious/SearchResult.html#method-c-new","(search_data)","<p>Initialization Method\n<p>Parses the hash into attributes.\n"],["numeric?","Jiralicious::Base","Jiralicious/Base.html#method-i-numeric-3F","(object)","<p>Validates if the provided object is a numeric value\n"],["options","Jiralicious::Configuration","Jiralicious/Configuration.html#method-i-options","()","<p>Pass options to set the values\n"],["parent_name","Jiralicious::Base","Jiralicious/Base.html#method-i-parent_name","()","<p>Generates the parent_name based on the current inheritance class.\n"],["parent_name","Jiralicious::Base","Jiralicious/Base.html#method-c-parent_name","()","<p>Generates the parent_name based on the current inheritance class.\n"],["parse!","Jiralicious::Parsers::FieldParser","Jiralicious/Parsers/FieldParser.html#method-i-parse-21","(fields)","<p>Parses an Array or Hash into the current class object.\n"],["properties_from_hash","Jiralicious::Base","Jiralicious/Base.html#method-i-properties_from_hash","(hash)","<p>Trash Extention properties_from_hash Adds an underscore (_) before a\nnumeric field. This ensures that …\n"],["reload","Jiralicious::Base","Jiralicious/Base.html#method-i-reload","()","<p>Default reload method is blank. For classes that implement lazy loading\nthis method will be overridden …\n"],["reload","Jiralicious::Issue","Jiralicious/Issue.html#method-i-reload","()","<p>Forces the Jira Issue to reload with current or updated information. This\nmethod is used in lazy loading …\n"],["remove","Jiralicious::Issue","Jiralicious/Issue.html#method-i-remove","(options = {})","<p>Method to remove or delete the current issue.\n"],["remove","Jiralicious::Issue","Jiralicious/Issue.html#method-c-remove","(key, options = {})","<p>Removes/Deletes the Issue from the Jira Project. It is not recommended to\ndelete issues however the functionality …\n"],["remove","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-c-remove","(key, id)","<p>Removes/Deletes the Comment from the Jira Issue. It is not recommended  to\ndelete comments however the …\n"],["remove","Jiralicious::Issue::Comment","Jiralicious/Issue/Comment.html#method-i-remove","(id = self.id)","<p>Removes/Deletes the Comment from the Jira Issue. It is not recommended to\ndelete comments; However, the …\n"],["remove","Jiralicious::Issue::Watchers","Jiralicious/Issue/Watchers.html#method-c-remove","(name, key)","<p>Removes/Deletes a Watcher from the Issue\n"],["remove","Jiralicious::Issue::Watchers","Jiralicious/Issue/Watchers.html#method-i-remove","(name)","<p>Removes/Deletes a Watcher from the Issue\n"],["request","Jiralicious::Session","Jiralicious/Session.html#method-i-request","(method, *options)","<p>Main access method to request data from the Jira API\n"],["reset","Jiralicious::Configuration","Jiralicious/Configuration.html#method-i-reset","()","<p>Resets all attributes to default values\n"],["rest_path","Jiralicious","Jiralicious.html#method-i-rest_path","()","<p>Returns the currently defined Rest API path\n"],["save","Jiralicious::Issue","Jiralicious/Issue.html#method-i-save","()","<p>Saves the current Issue but does not update itself.\n"],["save!","Jiralicious::Issue","Jiralicious/Issue.html#method-i-save-21","()","<p>Saves the current Issue and reloads to ensure it is upto date.\n"],["search","Jiralicious","Jiralicious.html#method-i-search","(jql, options = {})","<p>Provides the interface to access the JQL search functionality. Uses the\nsame syntax as Rest interface …\n"],["session","Jiralicious","Jiralicious.html#method-i-session","()","<p>Processes the session information and returns the current session object\n"],["set","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-set","(field, value)","<p>Sets the field key with the provided value.\n"],["set_assignee","Jiralicious::Issue","Jiralicious/Issue.html#method-i-set_assignee","(name)","<p>Method to assign an assignee by name in a current issue.\n"],["set_current","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-set_current","(fc)","<p>Fills the fields_current object with the provided Hash.\n"],["set_id","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-set_id","(field, value)","<p>Sets the field with a id hash. This is necessary for some objects in Jira.\n"],["set_name","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-set_name","(field, value)","<p>Sets the field with a name hash. This is necessary for some objects in\nJira.\n"],["transition","Jiralicious::Issue","Jiralicious/Issue.html#method-c-transition","(transitions_url, data)","<p>Legacy method to process transitions manually.\n"],["update","Jiralicious::Issue","Jiralicious/Issue.html#method-c-update","(issue, key)","<p>Updates the specified issue based on the provided HASH. It is not\nrecommended to access this method directly …\n"],["updated","Jiralicious::Issue::Fields","Jiralicious/Issue/Fields.html#method-i-updated","()","<p>Returns the updated fields object\n"]],"searchIndex":["jiralicious","authenticationerror","base","basicsession","captcharequired","configuration","cookieexpired","cookiesession","customfieldoption","field","invalidlogin","issue","comment","fields","transitions","watchers","issuenotfound","jiraerror","jqlerror","notloggedin","parsers","fieldparser","project","searchresult","session","transitionerror","add()","add()","add()","add()","add_comment()","after_request()","alive?()","all()","all()","all()","append_a()","append_h()","append_s()","assignee()","before_request()","before_request()","configure()","count()","create()","createmeta()","current()","edit()","edit()","editmeta()","endpoint_name()","endpoint_name()","endpoint_name()","extended()","fetch()","find()","find()","find()","find()","find_all()","find_all()","find_by_id()","find_by_key()","find_by_key()","find_by_key_and_id()","find_by_key_and_id()","format_for_create()","format_for_update()","get_transitions()","go()","go()","handler()","issue_list()","issues()","issues_raw()","length()","load()","load_yml()","loaded?()","login()","logout()","meta()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","numeric?()","options()","parent_name()","parent_name()","parse!()","properties_from_hash()","reload()","reload()","remove()","remove()","remove()","remove()","remove()","remove()","request()","reset()","rest_path()","save()","save!()","search()","session()","set()","set_assignee()","set_current()","set_id()","set_name()","transition()","update()","updated()"]}}